server:
  port: 8080

spring:
  application:
    name: documentscreated
---

spring:
  profiles: default
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    stream:
      kafka:
        binder:
          brokers: localhost:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: documentscreated
          destination: aivlebigproject
          contentType: application/json
        event-out:
          destination: aivlebigproject
          contentType: application/json
        outboundFuneralRequest: # KafkaProcessor.OUTPUT_FUNERAL_REQUEST
          destination: funeral-request-topic # 예: Bogu AI로 보내는 토픽 이름
        outboundSamangAiRequest: # KafkaProcessor.OUTPUT_SAMANG_AI_REQUEST
          destination: samang-ai-request-topic # 예: Samang AI로 요청 보내는 토픽 이름
        outboundTimetableAiRequest: # KafkaProcessor.OUTPUT_TIMETABLE_AI_REQUEST
          destination: timetable-ai-request-topic # 예: Timetable AI로 요청 보내는 토픽 이름
                # --- AI 처리 결과 인바운드 채널 ---
        inboundFuneralRequestProcessed: # KafkaProcessor.INPUT_FUNERAL_REQUEST_PROCESSED
          destination: funeral-request-processed # FastAPI에서 장례 요청 처리 후 발행하는 토픽 이름
          group: fastapi-processed-consumer-group # 이 토픽을 구독할 컨슈머 그룹 ID
          consumer:
            auto-offset-reset: earliest
        inboundSamangAiProcessed: # KafkaProcessor.INPUT_SAMANG_AI_PROCESSED
          destination: samang-ai-processed-topic # 예: Samang AI가 처리 후 결과를 보내는 토픽 이름
          group: samang-ai-processed-consumer-group
          consumer:
            auto-offset-reset: earliest
        inboundTimetableAiProcessed: # KafkaProcessor.INPUT_TIMETABLE_AI_PROCESSED
          destination: timetable-ai-processed-topic # 예: Timetable AI가 처리 후 결과를 보내는 토픽 이름
          group: timetable-ai-processed-consumer-group
          consumer:
            auto-offset-reset: earliest
logging:
  level:
    org.hibernate.type: trace
    org.springframework.cloud: debug

api:
  url: 
    documentscreated: localhost:8083 
    

server:
  port: 8083

---

spring:
  profiles: docker
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        implicit_naming_strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl
  cloud:
    stream:
      kafka:
        binder:
          brokers: my-kafka:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: documentscreated
          destination: aivlebigproject
          contentType: application/json
        event-out:
          destination: aivlebigproject
          contentType: application/json
        outboundFuneralRequest: # KafkaProcessor.OUTPUT_FUNERAL_REQUEST
          destination: funeral-request-topic # 예: Bogu AI로 보내는 토픽 이름
        outboundSamangAiRequest: # KafkaProcessor.OUTPUT_SAMANG_AI_REQUEST
          destination: samang-ai-request-topic # 예: Samang AI로 요청 보내는 토픽 이름
        outboundTimetableAiRequest: # KafkaProcessor.OUTPUT_TIMETABLE_AI_REQUEST
          destination: timetable-ai-request-topic # 예: Timetable AI로 요청 보내는 토픽 이름
                # --- AI 처리 결과 인바운드 채널 ---
        inboundFuneralRequestProcessed: # KafkaProcessor.INPUT_FUNERAL_REQUEST_PROCESSED
          destination: funeral-request-processed # FastAPI에서 장례 요청 처리 후 발행하는 토픽 이름
          group: fastapi-processed-consumer-group # 이 토픽을 구독할 컨슈머 그룹 ID
          consumer:
            auto-offset-reset: earliest
        inboundSamangAiProcessed: # KafkaProcessor.INPUT_SAMANG_AI_PROCESSED
          destination: samang-ai-processed-topic # 예: Samang AI가 처리 후 결과를 보내는 토픽 이름
          group: samang-ai-processed-consumer-group
          consumer:
            auto-offset-reset: earliest
        inboundTimetableAiProcessed: # KafkaProcessor.INPUT_TIMETABLE_AI_PROCESSED
          destination: timetable-ai-processed-topic # 예: Timetable AI가 처리 후 결과를 보내는 토픽 이름
          group: timetable-ai-processed-consumer-group
          consumer:
            auto-offset-reset: earliest

api:
  url: 
    documentscreated: documentscreated:8080 
    

